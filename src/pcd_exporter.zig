// -----------------------------------------------------------------------------
// Lazors – threaded binary‑PCD exporter               MIT licence
// Zig ≥ 0.12.0 – uses only std lib primitives
// -----------------------------------------------------------------------------
const std = @import("std");
const rl = @import("raylib");
const rc = @import("raycasting.zig");
const CLASS_COUNT = rc.CLASS_COUNT;

pub const Point = extern struct { x: f32, y: f32, z: f32, class: u8 };

/// The exporter is created once at program start and destroyed at shutdown.
/// Call `dump()` whenever you want to write a frame’s hits to <filename>.
// excerpt, pcd_exporter.zig
pub const Exporter = struct {
    alloc: std.mem.Allocator,

    pub fn create(alloc: std.mem.Allocator) !Exporter {
        return .{ .alloc = alloc };
    }

    pub fn destroy(self: *Exporter) void {
        _ = self; // nothing to dispose (yet)
    }

    /// Collects the points for this frame and writes <path>.pcd
    pub fn dump(
        self: *Exporter,
        path: []const u8,
        class_tx: *const [CLASS_COUNT][]rl.Matrix,
        class_counter: *const [CLASS_COUNT]usize,
    ) !void {
        // Gather hits → contiguous slice
        const pts = try collectPoints(self.alloc, class_tx, class_counter);
        defer self.alloc.free(pts);

        // Persist them as binary PCD
        try writeBinaryPCD(path, pts);
    }
};

fn collectPoints(
    alloc: std.mem.Allocator,
    class_tx: *const [CLASS_COUNT][]rl.Matrix,
    class_counter: *const [CLASS_COUNT]usize,
) ![]Point {
    var total: usize = 0;
    for (class_counter) |n| total += n;

    const buf = try alloc.alloc(Point, total);

    var i: usize = 0;
    for (0..CLASS_COUNT) |cls| {
        for (class_tx[cls][0..class_counter[cls]]) |m| {
            buf[i] = .{ .x = m.m12, .y = m.m13, .z = m.m14, .class = @intCast(cls) };
            i += 1;
        }
    }
    return buf;
}

fn writeBinaryPCD(path: []const u8, pts: []Point) !void {
    var file = try std.fs.cwd().createFile(path, .{ .truncate = true });
    defer file.close();

    var hdr: [256]u8 = undefined;
    const header = try std.fmt.bufPrint(&hdr,
        \\# .PCD v0.7 (binary, xyz, class) – generated by lazors
        \\VERSION 0.7
        \\FIELDS x y z class
        \\SIZE 4 4 4 4
        \\TYPE F F F U
        \\COUNT 1 1 1 1
        \\WIDTH {d}
        \\HEIGHT 1
        \\VIEWPOINT 0 0 0 1 0 0 0
        \\POINTS {d}
        \\DATA binary
        \\
    , .{ pts.len, pts.len });

    try file.writeAll(header);
    try file.writeAll(std.mem.sliceAsBytes(pts));
}
